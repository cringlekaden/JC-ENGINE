uniform vec3 C_cameraPosition;
uniform float specularIntensity;
uniform float specularExponent;

struct Attenuation
{
    float constant;
    float linear;
    float exponent;
};

struct BaseLight
{
    vec3 color;
    float intensity;
};

struct DirectionalLight
{
    BaseLight baseLight;
    vec3 direction;
};

struct PointLight
{
    BaseLight baseLight;
    Attenuation atten;
    vec3 position;
    float range;
};

struct SpotLight
{
    PointLight pointLight;
    vec3 direction;
    float cutoff;
};

vec4 calculateLight(BaseLight baseLight, vec3 direction, vec3 normal, vec3 worldPos) {
    float diffuseFactor = dot(normal, -direction);
    vec4 diffuseColor = vec4(0, 0, 0, 0);
    vec4 specularColor = vec4(0, 0, 0, 0);
    if(diffuseFactor > 0) {
        diffuseColor = vec4(baseLight.color, 1.0) * baseLight.intensity * diffuseFactor;
        vec3 directionToEye = normalize(C_cameraPosition - worldPos);
        //Blinn-Phong below
        //vec3 halfDirection = normalize(directionToEye - direction);
        //float specularFactor = dot(halfDirection, normal);
        //Phong below
        vec3 reflectDirection = normalize(reflect(direction, normal));
        float specularFactor = dot(directionToEye, reflectDirection);
        specularFactor = pow(specularFactor, specularExponent);
        if(specularFactor > 0)
            specularColor = vec4(baseLight.color, 1.0) * specularIntensity * specularFactor;
    }
    return diffuseColor + specularColor;
}

vec4 calculateDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPos) {
    return calculateLight(directionalLight.baseLight, -directionalLight.direction, normal, worldPos);
}

vec4 calculatePointLight(PointLight pointLight, vec3 normal, vec3 worldPos) {
    vec3 lightDirection = worldPos - pointLight.position;
    float distanceToPoint = length(lightDirection);
    if(distanceToPoint > pointLight.range)
        return vec4(0,0,0,0);
    lightDirection = normalize(lightDirection);
    vec4 color = calculateLight(pointLight.baseLight, lightDirection, normal, worldPos);
    float attenuation = pointLight.atten.constant
                        + pointLight.atten.linear * distanceToPoint
                        + pointLight.atten.exponent * distanceToPoint * distanceToPoint + 0.0001;
    return color / attenuation;
}

vec4 calculateSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPos) {
    vec3 lightDirection = normalize(worldPos - spotLight.pointLight.position);
    float spotFactor = dot(lightDirection, spotLight.direction);
    vec4 color = vec4(0,0,0,0);
    if(spotFactor > spotLight.cutoff)
        color = calculatePointLight(spotLight.pointLight, normal, worldPos) * (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
    return color;
}